@page "/"

@using FeedbackSurvey.Components;
@using FeedbackSurvey.Shared;
@using System.Timers;

@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<audio src="@soundEffect" autoplay></audio>

<Modal @ref="modalInfo">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalInfo!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-info"></i> @msgInfoTitle</Title>
    <Body>
        @msgInfo
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalInfo!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalError">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalError!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-triangle-exclamation"></i> @msgErrorTitle</Title>
    <Body>
        <div class="alert alert-danger" role="alert">
            @msgError
        </div>
        @if (msgErrorStackTrace != null)
        {
            <p><i class="fa-solid fa-bug"></i> Stack Trace:</p>
            <pre class="pre-scrollable ErrorDetails">@msgErrorStackTrace</pre>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalError!.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="modalConfirm">
    <WindowControls>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => modalConfirm!.Close()"></button>
    </WindowControls>
    <Title><i class="fa-solid fa-circle-question"></i> @msgConfirmTitle</Title>
    <Body>
        <p>
            @msgConfirm
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="FormAction"><i class="fa-solid fa-trash"></i> Yes</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => modalConfirm!.Close()"><i class="fa-solid fa-right-from-bracket"></i> Cancel</button>
    </Footer>
</Modal>

<div class="container-fluid PanelUnderBackgroundText">
    <div class="row">
        <div class="col-md">
            <div class="alert alert-success Question" role="alert">
                <h1 class="alert-heading text-center"><i class="fa-solid fa-circle-question"></i> How was your experience today at COPC?</h1>
            </div>
        </div>
    </div>
    <div class="row FeedbackButtons" data-bs-theme="dark">
        <div class="col-md">
            <img src="../images/Happy5.png" class="img-fluid" alt="Great" @onclick="() => RecordFeedback(5)" />
        </div>
        <div class="col-md">
            <img src="../images/Happy4.png" class="img-fluid" alt="Good" @onclick="() => RecordFeedback(4)" />
        </div>
        <div class="col-md">
            <img src="../images/Happy3.png" class="img-fluid" alt="OK" @onclick="() => RecordFeedback(3)" />
        </div>
        <div class="col-md">
            <img src="../images/Happy2.png" class="img-fluid" alt="Poor" @onclick="() => RecordFeedback(2)" />
        </div>
        <div class="col-md">
            <img src="../images/Happy1.png" class="img-fluid" alt="Bad" @onclick="() => RecordFeedback(1)" />
        </div>
    </div>
</div>

@code {
    //Hide navbar in layout component
    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    public string? action { get; set; }
    public string? soundEffect { get; set; }

    public int? Rating { get; set; } = null;

    private Timer? CountdownTimer;
    private int? SecondsToCountdown = 5;
    private int? CountdownInSeconds;
    private string? FeedbackMessageText { get; set; }

    //Modals
    private Modal? modalInfo { get; set; }
    public string? msgInfoTitle = null;
    public MarkupString? msgInfo = null;

    private Modal? modalError { get; set; }
    public string? msgErrorTitle = null;
    public MarkupString? msgError = null;
    public string? msgErrorStackTrace = null;

    private Modal? modalConfirm { get; set; }
    public string? msgConfirmTitle = null;
    public MarkupString? msgConfirm = null;

    protected override async Task OnInitializedAsync()
    {
        if (Layout != null)
        {
            Layout.HideNav();
        }

        await PlayWelcomeMessage();
    }

    private async Task FormAction()
    {
        //Determine what clear form button should do on dialog box

        if (action == "RemoveFeedback")
        {
            //For future use, if needed
        }
        else
        {
            action = "Error";
            soundEffect = SoundFunctions.GetErrorSound();

            msgErrorTitle = $"Invalid Action";
            msgError = (MarkupString)$"An invalid option was specified. Please try again.";
            msgErrorStackTrace = null;

            modalError!.Open();
        }
    }

    private async Task RecordFeedback(int rating)
    {
        Rating = rating;
        Console.WriteLine($"Feedback recorded with rating: {rating}");

        //Set Feedback message based on rating
        switch(rating)
        {
            case 5:
                FeedbackMessageText = $"Thank you for your positive feedback! We're glad you had a great experience.";
                break;
            case 4:
                FeedbackMessageText = $"Thank you for your feedback! We're happy to hear you had a good experience.";
                break;
            case 3:
                FeedbackMessageText = $"Thank you for your feedback! We hope to improve your experience next time.";
                break;
            case 2:
                FeedbackMessageText = $"Thank you for your feedback! We're sorry to hear that your experience was poor.";
                break;
            case 1:
                FeedbackMessageText = $"Thank you for your feedback! We're disappointed to hear that your experience was bad.";
                break;
            default:
                FeedbackMessageText = $"Thank you for your feedback!";
                break;
        };

        action = "ShowThankyou";
        soundEffect = SoundFunctions.GetConfirmSound();

        msgInfoTitle = $"Thank You For Your Feedback";
        msgInfo = FeedbackMessage(FeedbackMessageText, CountdownInSeconds);
        modalInfo!.MakeLarge();

        modalInfo!.Open();

        HideMessageTimed();

        // Optionally, navigate to a thank you page or display a message
        // NavigationManager.NavigateTo("/thank-you");
    }

    private void HideMessageTimed()
    {
        CountdownInSeconds = SecondsToCountdown;
        StartTimer();
    }

    public void StartTimer()
    {
        CountdownTimer = new System.Timers.Timer(1000);
        CountdownTimer.Elapsed += CountDownAndHideMessage;
        CountdownTimer.Enabled = true;
    }

    public void CountDown(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (CountdownInSeconds > 0)
        {
            CountdownInSeconds -= 1;
        }
        else
        {
            if (CountdownTimer != null)
            {
                CountdownTimer.Enabled = false;
                CountdownTimer.Stop();
                CountdownTimer.Dispose();
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public void CountDownAndHideMessage(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (CountdownInSeconds > 0)
        {
            CountdownInSeconds -= 1;
            msgInfo = FeedbackMessage(FeedbackMessageText, CountdownInSeconds);
        }
        else
        {
            if (CountdownTimer != null)
            {
                CountdownTimer.Enabled = false;
                CountdownTimer.Stop();
                CountdownTimer.Dispose();
            }

            //Close message modal
            modalInfo!.Close();
            soundEffect = string.Empty;
            InvokeAsync(async () => await PlayWelcomeMessage());

        }
        InvokeAsync(StateHasChanged);
    }

    public MarkupString? FeedbackMessage(string? feedbackMessageText, int? timeLeft)
    {
        MarkupString? timeLeftMessage = (MarkupString)$@"
            <div class=""alert alert-warning"" role=""alert"">
                <h3><i class=""fa-solid fa-triangle-exclamation""></i> Returning To Main Screen in <strong>{timeLeft}</strong> Seconds</h3>
            </div>
            <div class=""alert alert-primary"" role=""alert"">
                <h1>
                    {feedbackMessageText}
                </h1>
            </div>
            <p>
                Want to leave us more feedback? Scan this QR code on your phone and tell us more about your experience:
            </p>
            <div class=""row"">
                <div class=""col-md text-center"">
                    <div class=""qrCode"">
                        <img src=""../images/QRCodeForFeedbackForm.svg"" class=""img-fluid"" alt=""Leave Us More Details"" />
                    </div>
                </div>
            </div>
            ";

        return timeLeftMessage;
    }

    private async Task PlayWelcomeMessage()
    {
        await JSRuntime.InvokeVoidAsync("speachInterop.sayWelcomeMessage");
    }
}